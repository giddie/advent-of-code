-- Setup
create table if not exists input_lines (
  line_number integer generated by default as identity,
  text text not null,
  constraint input_lines_pkey primary key (line_number)
);

-- \copy input_lines (text) from 'example';
\copy input_lines (text) from 'input';

create view matches_count as (
             select line_number,
                    count(number) as matches_count
               from input_lines
  left join lateral split_part(text, ': ', 2) as card_content
                 on true
  left join lateral string_to_array(card_content, ' | ') as numbers
                 on true
  left join lateral (
                      select winning_numbers[1] as number
                        from regexp_matches(numbers[1], '\d+', 'g') as winning_numbers
                        join regexp_matches(numbers[2], '\d+', 'g') as held_numbers
                          on winning_numbers[1] = held_numbers[1]
                    )
                 on true
              where number is not null
           group by line_number
)
;

create view extra_card_draws as (
             select line_number as card_number,
                    extra_card_draw
               from matches_count
  left join lateral generate_series((line_number + 1), (line_number + matches_count)) as extra_card_draw
                 on true
)
;

-- Part 1
select sum(pow(2, (matches_count - 1))) as result
  from matches_count
;

-- Part 2 - Simple recursion (slow)
with recursive
total_card_draws as (
  (
    select cast (line_number as bigint) as card_number
      from input_lines
  )
  union all
  (
    select extra_card_draws.extra_card_draw
      from total_card_draws
      join extra_card_draws
        on total_card_draws.card_number = extra_card_draws.card_number
  )
)
select count(*) as result
  from total_card_draws
;

-- Part 2 - Scan through cards accumulating multipliers (fast)
with recursive
total_card_draws as (
  (
    select 0 as card_number,
           jsonb_object('{}') as multipliers,
           0 as card_count
  )
  union all
  (
               select card_number + 1,
                      (
                           (multipliers - (card_number + 1)::text)
                        || coalesce(new_multipliers, '{}')
                      ) as multipliers,
                      new_card_count
                 from total_card_draws
    left join lateral coalesce(
                        (multipliers->>(card_number + 1)::text)::integer,
                        1
                      ) as new_card_count
                   on true
    left join lateral (
                        select (
                                 jsonb_object_agg(
                                   extra_card_draw,
                                   coalesce(
                                     (multipliers->>extra_card_draw::text)::integer,
                                     1
                                   ) + new_card_count
                                 )
                               ) as new_multipliers
                          from extra_card_draws
                         where card_number = (total_card_draws.card_number + 1)
                      )
                   on true
                where card_number < (
                                      select count(*) as num_lines
                                        from input_lines
                                    )
  )
)
select sum(card_count) as result
  from total_card_draws
;

drop table input_lines cascade;
